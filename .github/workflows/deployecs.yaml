name: Deploy ECS Infrastructure
run-name: ${{ github.actor }} is deploying ECS Infrastructure

on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    
env:
  AWS_REGION: eu-central-1
  TF_VERSION: 1.5.0 
  IMAGE_NAME: docker-nginx-pospisilv-hello
    
jobs:
      
  docker-build-upload-terraform-ecs:        
    name: 'Docker build, terraform ECS'      
    runs-on: ubuntu-latest
          
    permissions:
      contents: read
      id-token: write          
          
    steps:          

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}           
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3        

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create AWS ECR image
        run: |      
          ECR_URI=$(aws ecr create-repository --repository-name ${{ env.IMAGE_NAME }} --region ${{ env.AWS_REGION }} --query "repository.repositoryUri" --output text) 
          echo "repository_uri=$ECR_URI" >> $GITHUB_OUTPUT 
          echo "ECR_REPOSITORY_URI=$ECR_URI" >> $GITHUB_ENV
       
      - name: Upload Docker image
        env:
          ECR_REPOSITORY_URI: ${{ env.ECR_REPOSITORY_URI }}
        run: |       
          docker build -t $ECR_REPOSITORY_URI:latest .
          docker push $ECR_REPOSITORY_URI:latest          
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
        
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: terraform init      
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color      
      
#      - name: Terraform Plan
#        id: plan
#        if: github.event_name == 'pull_request'
#        run: terraform plan -no-color -input=false
#        continue-on-error: true      
#      
#      - name: Update Pull Request
#        uses: actions/github-script@v7
#        if: github.event_name == 'pull_request'
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const output = "#### Terraform Format and Style \'${steps.fmt.outcome }}\'
#            #### Terraform Initialization \'${{ steps.init.outcome }}\'
#            #### Terraform Validation \'${{ steps.validate.outcome }}\'
#            #### Terraform Plan \'${{ steps.plan.outcome }}\'
#            <details><summary>Show Plan</summary>
#            <br>    
#            ${process.env.PLAN}
#            <br>  
#            </details>
#
#            *Pushed by: @${{ github.actor }}, Action: \'${{ github.event_name }}\'";
#
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })      
#      
#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        run: exit 1      
      
      - name: Terraform Apply      
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          TF_VAR_docker_nginx_image: ${{ env.ECR_REPOSITORY_URI }}
        run: terraform apply -auto-approve -input=false     

      - name: Get Load Balancer URL
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: lb_url
        run: |
          LB_URL=$(terraform output -raw load_balancer_url)
          echo "url=$LB_URL" >> $GITHUB_OUTPUT
          echo "Load Balancer URL: $LB_URL"
        
      - name: Test Application
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Waiting for ECS service to be stable..."
          sleep 60
          echo "Testing application availability..."
          for i in {1..4}; do
            if curl -f "${{ steps.lb_url.outputs.url }}"; then
              echo "Application is responding!"
              break
            else
              echo "Attempt $i failed, retrying in 30 seconds..."
              sleep 30
            fi
          done        